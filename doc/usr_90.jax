*usr_90.txt*	For Vim バージョン 9.1.  Last change: 2025 Jul 24

		     VIM USER MANUAL - by Bram Moolenaar

			      Vim のインストール

								*install*
Vim を使うにはまずインストールする必要があります。システムにも依りますが、とて
も簡単な作業です。本章では、若干のヒントと、新しいバージョンへのアップグレード
手順を説明します。

|90.1|	Unix
|90.2|	MS-Windows
|90.3|	アップグレード
|90.4|	よくある問題
|90.5|	アンインストール

前章: |usr_52.txt|  Vim9 script でプラグインを作る
目次: |usr_toc.txt|

==============================================================================
*90.1*	Unix

最初に、Vim をシステム全体で使うのか、自分一人で使うのかを決めてください。イン
ストール方法はほぼ同じですが、インストールするディレクトリが異なります。
システムにインストールするときは、ベースディレクトリとして大抵は "/usr/local"
が使われます。ただし、これはシステムによって異なります。インストールされている
他のパッケージを参考にするなどして調べてください。
自分一人で使う場合は、例えばホームディレクトリをベースディレクトリにします。
ファイルはその下の "bin" や "share/vim" などに置かれます。


☆パッケージからインストール

使用する Unix/Linux システムによっては、コンパイル済みのバイナリパッケージが存
在する場合があります。これについては検索する必要があります。以前はさまざまな
UNIX システムのリストを保持していましたが、そのリストは古くなったため削除され
ました。

ソースから独自の UNIX バージョンをコンパイルすることをお勧めします。また、ソー
スからエディタを作成すると、コンパイルする機能を制御できます。ただし、これには
コンパイラが必要です。

Linux を使っている場合、"vi" はおそらく最小構成の Vim です。それには例えば構文
強調表示などの機能はありません。そのディストリビューションから別の Vim パッ
ケージが配布されていないか、あるいは Web サイトで公開されていないか調べてみて
ください。


☆ソースからインストール

Vim をコンパイルしてインストールするには、次のものが必要です:

	-  C コンパイラ (GCC または Clang が望ましい)
	-  git (オプション、github からクローンする場合のみ)
	-  zip/unzip (アーカイブを解凍する)
	-  Vim のソースアーカイブ

Vim のソースをダウンロードするには、Github プロジェクトページからクローンを作
成するか: >
	git clone https://github.com/vim/vim.git
<
または、以下を使用してアーカイブを直接ダウンロードします:

	https://github.com/vim/vim/archive/refs/heads/master.zip


☆コンパイル

まず作業用のディレクトリを作成します。例: >

	mkdir ~/vim
	cd ~/vim

この場所でアーカイブを展開します。次のようにして展開できます: >

	unzip vim-master.zip

欲しいのがデフォルトの機能だけで、環境が適切に設定されているのであれば、次のコ
マンドを実行するだけでコンパイルできます: >

	cd vim-master/src
	make

make プログラムによって configure とコンパイルが実行されます。設定を変更してコ
ンパイルする方法については後で説明します。
コンパイル中にエラーが発生した場合は、エラーメッセージをよく見てください。何が
悪かったのかを知るヒントが出ているはずです。可能ならそれを修正してください。も
しかしたら何かの機能を無効にする必要があるかもしれません。Makefile を見て自分
のシステム特有のヒントがないか確認してください。


☆テスト

コンパイルが正しくできたかどうか確認します: >

	make test

Vim が期待した動作をするかどうかをテストスクリプトを使って検査します。Vim が何
度も実行され、様々なテキストやメッセージが表示されます。最後に次のように表示さ
れたら検査は合格です:

	test results: ~
	ALL DONE ~

テストが失敗すると "TEST FAILURE" と表示されます。失敗メッセージが一つか二つ表
示された場合は、Vim はとりあえず動作していますが完全ではありません。エラーメッ
セージがたくさん表示されたり、テストが最後まで完了しなかった場合は、何か問題が
あります。自分で解決するか、誰かに聞いてください。メーリングリストの過去ログ
(|maillist-archive|) に答えがあるかもしれません。どうしても解決できない場合は
Vim のメーリングリスト (|maillist|) で質問してみてください。


☆インストール						*install-home*

ホームディレクトリにインストールする場合は、Makefile を開いて次の行を探してく
ださい:

	#prefix = $(HOME) ~

行頭の # を削除します。
システムにインストールする場合は、適切なディレクトリが自動的に選択されます。自
分でディレクトリを指定する方法は後述します。以下の作業は root で実行する必要が
あります。

次のコマンドで Vim をインストールします: >

	make install

必要なファイルが適切な場所にコピーされます。Vim を起動してみて正しくインストー
ルできたかどうかを確認してください。二つの簡単なテストで、Vim がランタイムファ
イルを検出できているかどうかを確認します: >

	:help
	:syntax enable

うまく動作しない場合は、次のコマンドで、Vim がどこからランタイムファイルを探し
ているのか確認してください: >

	:echo $VIMRUNTIME

また、Vim の起動時に "-V" 引数を付けることで、起動中に起きていることを見ること
ができます: >

	vim -V

ユーザーマニュアルは Vim が適切に動作することを前提に書かれています。Vim のイ
ンストールが終ったら、|not-compatible| の説明に従って、Vim を適切に設定してく
ださい。


☆機能を選択する

機能を選択する方法はいろいろあります。最も簡単なのは Makefile を編集する方法で
す。Makefile には多くの説明やサンプルが書かれています。大抵は行をコメントアウ
トすることで機能を有効/無効にできます。
make とは別に "configure" を実行する方法もあります。オプションを個別に設定する
ことができます。ただし、オプションを正しく理解して、正確に指定する必要がありま
す。
よく使われる引数を次に示します。これらは Makefile からでも有効にできます。

	--prefix={directory}	Vim をインストールするトップディレクトリ
	--with-features=tiny	一部の機能を無効にしてコンパイル
	--with-features=normal	多くの機能を有効にしてコンパイル
	--with-features=huge	ほとんどの機能を有効にしてコンパイル
				いつどの機能が有効になるのかは |+feature-list|
				を参照してください。

	--enable-perlinterp	Perl インターフェイスを有効にする。同様に、
				ruby、python、tclなどもあります。

	--disable-gui		GUI インターフェイスをコンパイルしない。
	--without-x		X-windows の機能をコンパイルしない。
				これら二つが指定された場合、Vim は X サーバー
				に接続しません。起動が早くなります。

オプションの一覧を見るには次のようにします: >

	./configure --help

各機能の簡単な説明と、より詳しい情報へのリンクは |feature-list| にあります。
冒険野郎な人は "feature.h" を開いてみてください。自分でソースコードを改造する
こともできますよ！

==============================================================================
*90.2*	MS-Windows

Microsoft Windows に Vim プログラムをインストールするには、いくつかの方法があ
ります:

    1. 公式サイトダウンロード (安定版)~

Vim の公式ウェブサイト https://www.vim.org にアクセスして、最新の安定版をダウ
ンロードしてください。このサイトには、ほとんどのユーザーがすぐに使用できる
Windows インストーラへのリンクがあります。

    2. winget (Windows パッケージマネージャー) の使用 ~

コマンドラインの使用を好む場合、Windows の組み込みパッケージマネージャーを使っ
て安定版の Vim を素早くインストールできます: >

	winget install vim.vim

または、最新のナイトリーバージョンをダウンロードするには、以下のコマンドを使用
します: >

	winget install vim.vim.nightly

この方法によって、最小限の手間で最新バージョンを入手できます。

    3. GitHub インストーラ (すべてのアーキテクチャ) ~

インストールをさらに制御するには (または ARM などの特定の CPU アーキテクチャを
使用している場合)、公式 GitHub リポジトリにアクセスしてください:

	https://github.com/vim/vim-win32-installer/

このリポジトリは、以下の毎日のインストーラとポータブル zip アーカイブを提供し
ます:

    - x86 (32-bit)
    - x64 (64-bit)
    - ARM64

ナイトリービルドや特定の設定が必要な場合に最適なオプションです

提供されているバイナリに、必要な機能が不足している場合は、自分で Vim をコンパ
イルしてみてください。ソースのアーカイブはバイナリと同じ場所にあります。対応す
る Makefile が用意されているコンパイラも必要です。Microsoft Visual C, MinGW と
Cygwin のコンパイラが使えます。詳しくは "src/INSTALLpc.txt" を見てください。
ソースは以下から入手できます:

	https://github.com/vim/vim

==============================================================================
*90.3*	アップグレード

既に Vim がインストールされているところに新たに Vim をインストールする方法を説
明します。


☆Unix

"make install" を実行すると、ランタイムファイルはバージョンごとのディレクトリ
にコピーされます。つまり以前のバージョンは上書きされません。複数のバージョンを
同時に使うことができます。
古いバージョンの "vim" 実行可能ファイルは上書きされます。古い実行可能ファイル
が必要ない場合は単に "make install" を実行してください。ランタイムファイルは手
動で削除します。古いバージョンのランタイムディレクトリを削除するだけです。例: >

	rm -rf /usr/local/share/vim/vim74

普通はこのディレクトリ以下のファイルが変更されることはありません。しかし、例え
ば "filetype.vim" などを変更した場合は、削除する前にその変更を新バージョンの方
にマージしてください。

新しいバージョンに切り替える前に試用期間を設けたい場合は、新しいバージョンを違
う名前でインストールしてください。configure に引数を設定する必要があります。
例: >

	./configure --with-vim-name=vim8

"make install" を実行する前に "make -n install" を実行し、大事なファイルが上書
きされないか確認してください。
評価の結果、新しいバージョンに切り替えると決めたら、実行可能ファイルの名前を変
更します。例: >

	mv /usr/local/bin/vim8 /usr/local/bin/vim


☆MS-Windows

アップグレードは新しいバージョンをインストールするのとほぼ同じです。古いバー
ジョンと同じ場所にファイルを展開してください。新しいディレクトリ (例えば
"vim82") が作成され、その下に新しいバージョンがコピーされます。ランタイムファ
イル、vimrc、viminfo などはそのまま残ります。
古いものをそのままにして新しいバージョンを実行したい場合は、多少の手作業が必要
です。install プログラムを実行すると、古いバージョンのためのファイルがいくつか
上書きされてしまいます。新しいバイナリをフルパス指定で実行してください。正しい
バージョンのランタイムファイルが自動的に検出されます。ただし、$VIMRUNTIME 変数
が定義されている場合はうまく機能しません。
アップグレードが満足のいくものであったなら、旧バージョンのファイルを削除してく
ださい。|90.5| 参照。

==============================================================================
*90.4*	よくある問題

Vim のインストール時に起こる問題と、その解決方法を説明します。インストールに関
する質問にも答えます。


Q: 私には root 権限がありません。Vim をインストールできますか？ (Unix)

次のような引数を付けて configure を実行してください。この例では $HOME/vim に
Vim がインストールされます: >

	./configure --prefix=$HOME

自分のディレクトリに Vim がコピーされます。エディタを実行するには $HOME/bin に
パスを通す必要があります。|install-home| も参照。


Q: 私の画面では表示される色が正しくありません (Unix)

端末の設定を確認してください。シェルの上で次のコマンドを使います: >

	echo $TERM

表示された端末タイプが正しくない場合はそれを修正します。詳しくは |06.2| を参照
してください。あるいは、gvim と呼ばれる GUI 版の Vim を使ってください。GUI な
ら端末を正しく設定する必要はありません。


Q: Backspace キーと Delete キーが正しく動いていないようです

キーが押されたときに送信されるコードが Backspace <BS> と Delete <Del> について
はとてもあいまいです。まず、$TERM の設定を確認してください。それが問題なけれ
ば、次の設定を試してください: >

	:set t_kb=^V<BS>
	:set t_kD=^V<Del>

一行目の ^V<BS> は CTRL-V を押してから Backspace キーを押します。二行目の
^V<Del> は CTRL-V を押してから Delete キーを押します。この二行を vimrc ファイ
ルに書いておくこともできます (|05.1|参照)。ただし、この方法は端末を変更すると
機能しなくなります。これ以外の解決方法は |:fixdel| を参照してください。


Q: 私は RedHat Linux を使っています。システム付属の Vim は使えますか？

RedHat にはデフォルトで最小構成の Vim がインストールされます。
"Vim-enhanced-version.rpm" のような名前の RPM パッケージを探して、それをインス
トールしてください。


Q: テキストを色付きで表示するには？ プラグインを動かすには？

サンプルの vimrc スクリプトを使ってください。説明は |not-compatible| にありま
す。

構文強調表示については第 6 章を参照してください: |usr_06.txt|。


Q: 便利な vimrc ファイルの例はありますか？

Web サイト (www.vim.org) に良い例がいくつかあります。


Q: 便利な Vim プラグインはどこにありますか？

Vim-online サイト (http://vim.sf.net) を参照してください。多くのユーザーが便利
な Vim script やプラグインをアップロードしています。


Q: 便利な Tips はどこにありますか？

Vim-online サイト (http://vim.sf.net) を参照してください。Vim のユーザーから寄
せられたヒントが集められています。メーリングリスト (|maillist-archive|) を検索
するのもいいでしょう。

==============================================================================
*90.5*	アンインストール

Vim をアンインストールする機会はあまりないと思いますが、その方法を説明します。


☆Unix

Vim をパッケージからインストールした場合は、パッケージマネージャーを確認し、
パッケージの除去方法を調べてください。
ソースからインストールした場合は、次のコマンドでアンインストールできます: >

	make uninstall

元のファイルを削除してしまった場合や、誰かが作ったアーカイブからインストールし
た場合は、この方法は使えません。手作業でファイルを削除してください。例えば
"/usr/local" にインストールした場合は以下のファイルを root 権限で削除します: >

	rm -rf /usr/local/share/vim/vim82
	rm /usr/local/bin/eview
	rm /usr/local/bin/evim
	rm /usr/local/bin/ex
	rm /usr/local/bin/gview
	rm /usr/local/bin/gvim
	rm /usr/local/bin/gvim
	rm /usr/local/bin/gvimdiff
	rm /usr/local/bin/rgview
	rm /usr/local/bin/rgvim
	rm /usr/local/bin/rview
	rm /usr/local/bin/rvim
	rm /usr/local/bin/rvim
	rm /usr/local/bin/view
	rm /usr/local/bin/vim
	rm /usr/local/bin/vimdiff
	rm /usr/local/bin/vimtutor
	rm /usr/local/bin/xxd
	rm /usr/local/man/man1/eview.1
	rm /usr/local/man/man1/evim.1
	rm /usr/local/man/man1/ex.1
	rm /usr/local/man/man1/gview.1
	rm /usr/local/man/man1/gvim.1
	rm /usr/local/man/man1/gvimdiff.1
	rm /usr/local/man/man1/rgview.1
	rm /usr/local/man/man1/rgvim.1
	rm /usr/local/man/man1/rview.1
	rm /usr/local/man/man1/rvim.1
	rm /usr/local/man/man1/view.1
	rm /usr/local/man/man1/vim.1
	rm /usr/local/man/man1/vimdiff.1
	rm /usr/local/man/man1/vimtutor.1
	rm /usr/local/man/man1/xxd.1


☆MS-Windows

インストーラを使ってインストールした場合は、Vim の実行可能ファイルと同じディレ
クトリ (例: "c:\vim\vim82") にある "uninstall-gui" プログラムを実行してくださ
い。スタートメニューに登録した場合は、そこから起動しても構いません。それによっ
て、ほとんどのファイルと、メニューと、デスクトップのショートカットが削除されま
す。いくつかのファイルは削除されずに残るかもしれませんが、それらを削除するには
Windows の再起動が必要です。
"vim" ディレクトリをまるごと削除するという方法もあります。あなたが作成した
vimrc ファイルやランタイムファイルがそこに保存されている場合は慎重に実行してく
ださい。

zip アーカイブからインストールした場合は、"uninstall" プログラムを使ってくださ
い。"install" プログラムと同じディレクトリにあります (例: "c:\vim\vim82")。コ
ントロールパネルの「アプリケーションの追加と削除」からも削除できます。
ただし、これはレジストリの登録を削除するだけです。ファイルの削除は自分でやる必
要があります。単に "vim\vim82" をまるごと削除します。そこにあなたが変更を加え
たファイルは保存されていないと思いますが、念のため確認してください。
"vim" ディレクトリにあなたが作成した vimrc ファイルやランタイムファイルが入っ
ているなら、それらは残しておいた方がいいかもしれません。

==============================================================================

目次: |usr_toc.txt|

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
